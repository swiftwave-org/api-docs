openapi: 3.0.0
info:
  title: SwiftwaveTool
  version: 1.0.0
servers:
  - url: http://{{server}}
tags:
  - name: Application Management
  - name: Application Management > Avaiibility Check
  - name: Authentication
  - name: Domain Management
  - name: Git Credentials management
  - name: Ingress Management
  - name: Redirect Management
  - name: Volume Management
paths:
  /applications/availiblity/service_name:
    get:
      tags:
        - Application Management > Avaiibility Check
      summary: Check service name
      parameters:
        - name: name
          in: query
          schema:
            type: string
          example: h-service
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications/deploy/upload:
    post:
      tags:
        - Application Management
      summary: Upload tar file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications/deploy/dockerconfig/generate/tarball:
    post:
      tags:
        - Application Management
      summary: Generate config tarfile
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                file:
                  type: string
                  example: 7a4a41c0-d7f2-45a2-8393-016197ec2375.tar
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications/deploy/dockerconfig/generate/git:
    post:
      tags:
        - Application Management
      summary: Generate config git
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                repository_url:
                  type: string
                  example: >-
                    https://github.com/Jadavpur-University-Product-Club/official-website
                branch:
                  type: string
                  example: main
                git_credential_id:
                  type: integer
                  example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications/deploy/dockerconfig/generate/custom:
    post:
      tags:
        - Application Management
      summary: Generate config dockerfile
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                dockerfile:
                  type: number
                  example: >-
                    FROM ruby:3.2.1


                    # Args

                    ARG NON_ROOT_USER_ID

                    ARG NON_ROOT_GROUP_ID

                    ARG NON_ROOT_USERNAME=user

                    ARG NON_ROOT_GROUPNAME = "user"

                    ARG OPERATING_SYSTEM


                    # Check mandatory args

                    RUN test -n "$NON_ROOT_USER_ID"

                    RUN test -n "$NON_ROOT_GROUP_ID"

                    RUN test -n "$OPERATING_SYSTEM"

                    RUN test -n "$NON_ROOT_USERNAME"

                    RUN test -n "$NON_ROOT_GROUPNAME"


                    # Create app directory

                    RUN mkdir /circuitverse

                    # Create non-root user directory

                    RUN mkdir /home/${NON_ROOT_USERNAME}

                    # Create non-root vendor directory

                    RUN mkdir /home/vendor

                    # set up workdir

                    WORKDIR /circuitverse


                    # Set shell to bash

                    SHELL ["/bin/bash", "-c"]


                    # install dependencies

                    RUN apt-get update -qq && apt-get install -y imagemagick
                    shared-mime-info libvips sudo cmake netcat libnotify-dev git
                    chromium-driver chromium --fix-missing && apt-get clean


                    # Setup nodejs and yarn

                    RUN curl -sL https://deb.nodesource.com/setup_16.x | bash \
                     && apt-get update && apt-get install -y nodejs && rm -rf /var/lib/apt/lists/* \
                     && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \
                     && echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list \
                     && apt-get update && apt-get install -y yarn && rm -rf /var/lib/apt/lists/*

                    # If OPERATING_SYSTEM is Linux, create non-root user

                    RUN if [[ "$OPERATING_SYSTEM" == "linux" ]]; then \
                        # create non-root user with same uid:gid as host non-root user
                        groupadd -g ${NON_ROOT_GROUP_ID} -r ${NON_ROOT_GROUPNAME} && useradd -u ${NON_ROOT_USER_ID} -r -g ${NON_ROOT_GROUPNAME} ${NON_ROOT_USERNAME} \
                        && chown -R ${NON_ROOT_USERNAME}:${NON_ROOT_GROUPNAME} /circuitverse \
                        && chown -R ${NON_ROOT_USERNAME}:${NON_ROOT_GROUPNAME} /home/${NON_ROOT_USERNAME} \
                        && chown -R ${NON_ROOT_USERNAME}:${NON_ROOT_GROUPNAME} /home/vendor \
                        # Provide sudo permissions to non-root user
                        && adduser ${NON_ROOT_USERNAME} sudo \
                        && echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers ;\
                    fi


                    # Switch to non-root user

                    USER ${NON_ROOT_USERNAME}
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications/deploy:
    post:
      tags:
        - Application Management
      summary: Deploy app from docker image
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                service_name: minc
                source_type: image
                docker_image: tanmoysrt/minc:v2
                environment_variables: {}
                build_args: {}
                volumes:
                  test_vol_1: /app
                replicas: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications:
    get:
      tags:
        - Application Management
      summary: Fetch all applications summary
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications/{id}:
    get:
      tags:
        - Application Management
      summary: Fetch application
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '3'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Application Management
      summary: Update & Redeploy application
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                source:
                  id: 18
                  type: git
                  git_credential:
                    id: 2
                    name: default
                    username: ''
                    password: ''
                  git_credential_id: 2
                  git_provider: github
                  repository_username: Jadavpur-University-Product-Club
                  repository_name: official-website
                  branch: main
                  last_commit: ''
                  tarball_file: ''
                  docker_image: ''
                dockerfile: >-
                  # Install dependencies only when needed

                  FROM node:18.11-slim AS deps

                  WORKDIR /app

                  # Install dependencies based on the preferred package manager

                  COPY package.json yarn.lock* package-lock.json*
                  pnpm-lock.yaml* ./

                  RUN \
                    if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
                    elif [ -f package-lock.json ]; then npm ci; \
                    elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
                    else echo "Lockfile not found." && exit 1; \
                    fi

                  # Rebuild the source code only when needed

                  FROM node:18.11-slim AS builder


                  # Build args

                  ARG BUILD_COMMAND="npm run build"


                  WORKDIR /app

                  COPY . .

                  COPY --from=deps /app/node_modules ./node_modules

                  RUN touch ./modify.js

                  RUN echo 'let data = require("./next.config.js");' >>
                  ./modify.js

                  RUN echo 'data.output = "standalone";' >> ./modify.js

                  RUN echo 'require("fs").writeFileSync("./next.config.js",
                  `module.exports = ${JSON.stringify(data, null, 4)}`);'  >>
                  ./modify.js

                  RUN node ./modify.js

                  RUN rm ./modify.js

                  ENV NODE_ENV production

                  RUN ${BUILD_COMMAND} && npm prune --production


                  # Production image, copy all the files and run next

                  FROM node:18.11-slim AS runner


                  # Build args

                  ARG PORT=80


                  WORKDIR /app

                  ENV NODE_ENV production

                  RUN addgroup --gid 1001 nodejs

                  RUN adduser --disabled-password --gecos "" --uid 1001
                  --ingroup nodejs nextjs

                  COPY --from=builder /app/next.config.js ./

                  COPY --from=builder --chown=nextjs:nodejs
                  /app/.next/standalone ./        

                  COPY --from=builder --chown=nextjs:nodejs /app/.next/static
                  ./.next/static


                  USER nextjs

                  EXPOSE ${PORT}

                  ENV PORT ${PORT}

                  CMD ["node", "server.js"]
                environment_variables:
                  TEST_ENV: blue
                build_args:
                  BUILD_COMMAND: npm run build
                  PORT: '3000'
                replicas: 2
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Application Management
      summary: Delete application
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications/{id}/status:
    get:
      tags:
        - Application Management
      summary: Fetch application status
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications/servicenames:
    get:
      tags:
        - Application Management
      summary: Fetch application names
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications/{id}/redeploy:
    post:
      tags:
        - Application Management
      summary: Redeploy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                source:
                  id: 18
                  type: git
                  git_credential:
                    id: 2
                    name: default
                    username: ''
                    password: ''
                  git_credential_id: 2
                  git_provider: github
                  repository_username: Jadavpur-University-Product-Club
                  repository_name: official-website
                  branch: main
                  last_commit: ''
                  tarball_file: ''
                  docker_image: ''
                dockerfile: >-
                  # Install dependencies only when needed

                  FROM node:18.11-slim AS deps

                  WORKDIR /app

                  # Install dependencies based on the preferred package manager

                  COPY package.json yarn.lock* package-lock.json*
                  pnpm-lock.yaml* ./

                  RUN \
                    if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
                    elif [ -f package-lock.json ]; then npm ci; \
                    elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
                    else echo "Lockfile not found." && exit 1; \
                    fi

                  # Rebuild the source code only when needed

                  FROM node:18.11-slim AS builder


                  # Build args

                  ARG BUILD_COMMAND="npm run build"


                  WORKDIR /app

                  COPY . .

                  COPY --from=deps /app/node_modules ./node_modules

                  RUN touch ./modify.js

                  RUN echo 'let data = require("./next.config.js");' >>
                  ./modify.js

                  RUN echo 'data.output = "standalone";' >> ./modify.js

                  RUN echo 'require("fs").writeFileSync("./next.config.js",
                  `module.exports = ${JSON.stringify(data, null, 4)}`);'  >>
                  ./modify.js

                  RUN node ./modify.js

                  RUN rm ./modify.js

                  ENV NODE_ENV production

                  RUN ${BUILD_COMMAND} && npm prune --production


                  # Production image, copy all the files and run next

                  FROM node:18.11-slim AS runner


                  # Build args

                  ARG PORT=80


                  WORKDIR /app

                  ENV NODE_ENV production

                  RUN addgroup --gid 1001 nodejs

                  RUN adduser --disabled-password --gecos "" --uid 1001
                  --ingroup nodejs nextjs

                  COPY --from=builder /app/next.config.js ./

                  COPY --from=builder --chown=nextjs:nodejs
                  /app/.next/standalone ./        

                  COPY --from=builder --chown=nextjs:nodejs /app/.next/static
                  ./.next/static


                  USER nextjs

                  EXPOSE ${PORT}

                  ENV PORT ${PORT}

                  CMD ["node", "server.js"]
                environment_variables:
                  TEST_ENV: blue
                build_args:
                  BUILD_COMMAND: npm run build
                  PORT: '3000'
                replicas: 5
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications/{id}/logs/build:
    get:
      tags:
        - Application Management
      summary: Fetch deploy logs record
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications/{id}/logs/build/{log_id}:
    get:
      tags:
        - Application Management
      summary: Fetch deploy logs
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
        - name: log_id
          in: path
          schema:
            type: string
          required: true
          example: ad453ea6-01a6-412f-bddd-cc0cd40d7815
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /applications/{id}/logs/runtime:
    get:
      tags:
        - Application Management
      summary: Fetch runtime logs
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
                  example: tanmoysrt
                password:
                  type: integer
                  example: '123456'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/verify:
    post:
      tags:
        - Authentication
      summary: Verify
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /domains:
    get:
      tags:
        - Domain Management
      summary: Fetch domains
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Domain Management
      summary: Add domain
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: minctty.swiftwave.org
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /domains/shortlist:
    get:
      tags:
        - Domain Management
      summary: Fetch domains name
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /domains/{id}:
    get:
      tags:
        - Domain Management
      summary: Fetch domain
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Domain Management
      summary: Delete domain
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /domains/{id}/ssl/issue:
    post:
      tags:
        - Domain Management
      summary: Issue SSL
      requestBody:
        content: {}
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /git/credentials:
    get:
      tags:
        - Git Credentials management
      summary: Fetch Credentials
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Git Credentials management
      summary: Create Credential
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: personal_acc
                username: tanmoysrt
                password: ghp_
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /git/credentials/{id}:
    get:
      tags:
        - Git Credentials management
      summary: Fetch Credential
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Git Credentials management
      summary: Delete Credential
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /git/credentials/1:
    put:
      tags:
        - Git Credentials management
      summary: Update Credential
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: tanmoy-personal
                username: tanmoysrt
                password: ghp_
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /git/credentials/{id}/test:
    get:
      tags:
        - Git Credentials management
      summary: Verify Repo access
      parameters:
        - name: repository_url
          in: query
          schema:
            type: string
          example: https://github.com/Jadavpur-University-Product-Club/official-website
        - name: branch
          in: query
          schema:
            type: string
          example: main
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /mapping/ingresses:
    get:
      tags:
        - Ingress Management
      summary: Fetch rules
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Ingress Management
      summary: Add Rule
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                protocol: https
                domain_name: minc.swiftwave.org
                port: 443
                service_name: minc
                service_port: 3000
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /mapping/ingresses/{id}:
    get:
      tags:
        - Ingress Management
      summary: Fetch rule
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Ingress Management
      summary: Delete ruile
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '2'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /mapping/ingresses/restricted-ports:
    get:
      tags:
        - Ingress Management
      summary: Restricted port
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /mapping/redirects:
    get:
      tags:
        - Redirect Management
      summary: Fetch rules
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Redirect Management
      summary: Add Rule
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                port: 80
                domain_name: minc.tanmoy.info
                redirect_url: https://google.com
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /mapping/redirects/{id}:
    get:
      tags:
        - Redirect Management
      summary: Fetch rule
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Redirect Management
      summary: Delete Rule
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /volumes:
    get:
      tags:
        - Volume Management
      summary: Fetch all volumes
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Volume Management
      summary: Add volume
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: test_vol_1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /volumes/{name}:
    delete:
      tags:
        - Volume Management
      summary: Delete volume
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
          example: test_vol_1
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
